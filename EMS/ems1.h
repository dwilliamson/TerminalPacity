/* ===---===--- Section: TYPE-DEFINITIONS ---===---=== */

typedef unsigned char byte;                     /* Just cos ASM rules! */
typedef unsigned int  word;
typedef unsigned long dword;

typedef struct EMM_Memory_Store /* Just in case you're organised! :) */
{
   word handle;                                 /* EMM handle number */
   word pages;                                  /* Number of allocated pages */
} EMMDataStruct, *EMMDataPtr;

/* ===---===--- Section: DEFINITIONS ---===---=== */

#define BUILD_PTR(x, y) (char *)(((dword)x << 16) + y)

/* ===---===--- Section: Global Variables ---===---=== */

byte   EMMError = 0;                            /* Current error number */

/* Error strings generated by the EMM */

byte  *EMMEString[] = { "Success",
                        "Internal software error",
                        "Hardware malfunction",
                        "Unallocated or invalid handle",
                        "Undefined function requested",
                        "No handles available",
                        "Error in save or restore of mapping context",
                        "More pages requested than physically exist",
                        "More pages requested than currently available",
                        "Zero pages requested",
                        "Invalid logical page number",
                        "Illegal physical page number",
                        "Context stack out of memory",
                        "Context save failed, handle already has context stack",
                        "Context restore failed, no context stack for handle",
                        "Invalid subfunction",
                        "Undefined attribute type",
                        "Feature not supported"
                        "Success, portion of region was overwritten",
                        "Length of source or destination region exceeds length of region allocated to either source or destination handle",
                        "Conventional and expanded memory regions overlap",
                        "Offset within logical page exceeds size of logical page",
                        "Region length exceeds 1M"
                        "Source and destination regions have same handle and overlap",
                        "Memory source or destination type undefined",
                        "Specified DMA register not supported | Specified alternate map register set not supported",
                        "All DMA register sets currently allocated | All alternate map register sets currently allocated",
                        "Alternate DMA register sets not supported | Alternate map register sets not supported",
                        "Undefined or unallocated DMA register set | Undefined or unallocated alternate map register set",
                        "Dedicated DMA channels not supported",
                        "Specified dedicated DMA channel not supported",
                        "Duplicate handle name",
                        "Attempted to wrap around 1Mb conventional address space",
                        "Contents of partial page map corrupted or count of mappable segments exceeds total mappable segments",
                        "Operating system denied access" };

/* Error numbers to cross-reference with "EMMEString" */

byte   EMMEMap[35]  = { 0x00, 0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
                        0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91,
                        0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x9A, 0x9B,
                        0x9C, 0x9D, 0x9E, 0x9F, 0xA1, 0xA2, 0xA3, 0xA4 };
byte   EMMVersionMajor;
byte   EMMVersionMinor;
word   EMMFreePages;
word   EMMTotalPages;

/* ===---===--- Section: Prototypes ---===---=== */

/*
Function explanations (the ones you will need to use):

EMM_Check_Install   - Check for the existance of an EMM
EMM_Get_Version     - Get the current EMM version number
EMM_Get_Pages       - Get number of free and total pages in the EMM system
EMM_Alloc           - Setup handle and allocate memory pages
EMM_Map_Memory      - Map logical page into physical page window
EMM_Get_Page_Frame  - Get page frame base address
EMM_Realloc         - Reallocate pages
EMM_Num_Pages       - Get page count for handle
EMM_Free            - Release handle and memory pages

*/

byte EMM_Check_Install(void);
word EMM_GVA(void);
byte EMM_Get_Version(void);
void EMM_Print_Error(void);
byte EMM_Get_Pages(void);
byte EMM_Alloc(word pages, word *emmh_ptr);
byte EMM_Map_Memory(word, byte, word);
byte EMM_Get_Page_Frame(byte **pf_ptr);
byte EMM_Free(word emmhand);
byte EMM_Realloc(word, word);
word EMM_Num_Pages(word);
